//==========================================================
//  i2c OLED Display
//  Function : show 128x64 Graphic
//
//-----SCL = A5  ,  SDA = A4 , VCC = 3.3V-5V , GND----------
//==========================================================

#define OLED_DC 11
#define OLED_CS 12
#define OLED_CLK 10
#define OLED_MOSI 9
#define OLED_RESET 13

#define DATTN_CS 6

#include <Wire.h>
#include "Font.h"
#include "OLED.h"
#include "DATTN.h"
#include "Encoder.h"


//  Attenuator controls
const byte attSetAddr = 0x38;
const byte attResetAddr = 0x3E;
const int offVolume = 100;
const int relayLatchTime = 3;    //  time in milliseconds
int newVol = offVolume ;



/*
static uint8_t buffer[128 * 64 / 8] = { 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3E, 0x0A, 0x0A, 0x0A, 0x04, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x1E, 0x20, 0x1E, 0x20,
0x1E, 0x00, 0x3E, 0x2A, 0x2A, 0x2A, 0x2A, 0x00, 0x3E, 0x0A, 0x0A, 0x0A, 0x34, 0x00, 0x3E, 0x2A,
0x2A, 0x2A, 0x2A, 0x00, 0x3E, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E,
0x2A, 0x2A, 0x2A, 0x14, 0x00, 0x06, 0x08, 0x30, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x08, 0x84, 0x7E,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x3E, 0x22, 0x22, 0x1C, 0x00, 0x18, 0x34, 0x2C, 0x08, 0x00, 0x28, 0x2C, 0x34, 0x14, 0x00,
0x3A, 0x00, 0x18, 0xA4, 0xA4, 0x7C, 0x00, 0x3C, 0x04, 0x04, 0x38, 0x00, 0x3E, 0x22, 0x22, 0x1C,
0x00, 0x3E, 0x04, 0x08, 0x3E, 0x00, 0x3C, 0x12, 0x12, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0xF0,
0x08, 0x04, 0x84, 0x42, 0x22, 0x11, 0x11, 0x18, 0x28, 0x44, 0x84, 0x0A, 0x12, 0x21, 0xC0, 0xC1,
0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
0x1A, 0xA3, 0xC4, 0x48, 0x48, 0x30, 0x20, 0x10, 0x08, 0x88, 0x84, 0x45, 0x42, 0x21, 0x10, 0x0F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x20,
0x60, 0x40, 0x20, 0x20, 0x20, 0x20, 0x10, 0x10, 0x10, 0x70, 0x38, 0x18, 0x08, 0x04, 0x04, 0x02,
0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
0x41, 0x60, 0x50, 0x88, 0x04, 0x02, 0x02, 0x05, 0x05, 0x08, 0x10, 0x21, 0xA2, 0x44, 0x28, 0xF0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x03, 0x01, 0x01, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x80, 0xC0, 0x20, 0x30, 0x18, 0x0C, 0xE6, 0x7F, 0x21, 0x20, 0xC0, 0x00, 0x80,
0xE0, 0x30, 0x20, 0x16, 0x1E, 0x06, 0x04, 0x02, 0x0E, 0x06, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x80,
0x43, 0x24, 0x28, 0x10, 0x11, 0x8A, 0x8C, 0xC4, 0x42, 0x22, 0xA1, 0x11, 0x10, 0x88, 0x04, 0x43,
0x00, 0x10, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF0, 0x1E, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F,
0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};
*/

OLED oledI2C(128, 64,SSD1306);
OLED oledSPI(128, 64,SH1106, OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
DATTN dattnSPI(OLED_MOSI, OLED_CLK, DATTN_CS);
OLED* oled;

Encoder myEncoder(2,3,4);
float newData = 0.0f;

void EncoderMoveInterrupt() { myEncoder.lowLevelTick(); Serial.println("tick"); }
void EncoderClickInterrupt() { myEncoder.lowLevelClick(); }


unsigned char fontSys8Name[]="fontSys8";
unsigned char fontBw24Name[]="fontBw24";
Font _fSys8(fontSys8Name, 8, 8, 0x20, 0xff);
Font _fBw24(fontBw24Name, 24, 24, '0', '9');

unsigned char fill_string1[]="Master";
unsigned char fill_string2[]="OLED 128*64";
unsigned char fill_string3[]="0123456789ABCDEF";
unsigned char fill_string4[]="Volume";
unsigned char fill_string5[]="Effect";
unsigned char zero[] = "0";
unsigned char tmpString[]="00";
unsigned char tmpString2[]="0";
unsigned char tttString[]="00";


//==========================================================//
void setup()
{
  /*  for encoder  */
  Serial.begin(38400);
  
  

  Wire.begin();
  oledI2C.InitOLED();

  dattnSPI.InitDAttn();
  

  digitalWrite(DATTN_CS, HIGH);
  
  oledSPI.InitOLED();
  delay(10);
  oledI2C.SetDisplayOff();
  oledSPI.SetDisplayOff();

  for (int i = 1; i <= 8; ++i) {
    dattnSPI.SetRelay(i, false);
  }
  delay(2000);  

  
  oledI2C.SetDisplayOn();

//  attachInterrupt(2,EncoderMoveInterrupt,CHANGE);
//  attachInterrupt(3,EncoderMoveInterrupt,CHANGE);  
//  attachInterrupt(4,EncoderClickInterrupt,CHANGE);  
  
  myEncoder.setMinMax(1,100);
  myEncoder.setPosition(0);
  myEncoder.setRate(0.25f);
  myEncoder.setIntegerMode(true);


  
  //delay(500);

  
//  dattnSPI.SendCommand(0x10);
//  delay(6);
//  dattnSPI.SendCommand(0x00);
//  delay(6);

//  dattnSPI.SendCommand(0x20);
//  delay(6);
//  dattnSPI.SendCommand(0x00);
//  delay(6);
//  
//  dattnSPI.SendCommand(0x40);
//  delay(6);
//  dattnSPI.SendCommand(0x00);
//  delay(6);
//
//  dattnSPI.SendCommand(0x80);
//  delay(6);
//  dattnSPI.SendCommand(0x00);
//  delay(6);


  //AttnSetup();

}

//==========================================================//
void loop()
{
  //oledSPI.drawBitmap((unsigned char*)buffer);
  //oledI2C.drawBitmap((unsigned char*)buffer);
  unsigned int v;
  String string1;

  //dattnSPI.SetVolume(0x1000);

//  if (myEncoder.hasChanged())
//  {
//    newData = myEncoder.getPosition();
//    Serial.print("> Position: ");
//    Serial.println(newData);
//
//    SetVolume((int)newData);
//
//  }
//  if (myEncoder.hasClick()) Serial.println("! Click !");
//  if (myEncoder.onClickHold()) { Serial.println(" ... Holding ..."); delay(500); }

  

  if (myEncoder.tick())
  {
    newData = myEncoder.getPosition();
    Serial.print("> Position: ");
    Serial.println(newData);
    if (myEncoder.hasClick()) Serial.println("! Click !");
    if (myEncoder.onClickHold()) { Serial.println(" ... Holding ..."); delay(500); }

    SetVolume((int)newData);
  }  




  /*
  for (int i = 1; i <= 8; ++i) {
    //drawCounter(&oledI2C, 4, 0, i, 0);

    drawSmCounter(&oledI2C, 0, 0, i);
    tttString[0]='T';
    tttString[1]=' ';
    oledI2C.SendStr(0,3,&_fSys8,tttString);
    
    v = dattnSPI.SetRelay(i, true);
    drawSmCounter(&oledI2C, 0, 6, v);
    delay(2000);    

    tttString[0]='F';
    tttString[1]=' ';
    oledI2C.SendStr(0,3,&_fSys8,tttString);
    v= dattnSPI.SetRelay(i, false);
    drawSmCounter(&oledI2C, 0, 6, v);
    delay(2000);    
  }
  */
  //oledI2C.ClearDisplay();
  //for (int z = 0; z < 256; ++z) {
  //  SetVolume(z);
  //  delay (4000);
  //}

  //RunDemo(&oledSPI);
  
//  for (int i=offVolume; i<255; ++i) {
//    SetVolume(255-i, 0);
//    SetVolume(255-i, 1);
//    delay(100);
//  }
  
  //RunDemo(&oledI2C);
}


//==========================================================//
void drawCounter(OLED* oled, unsigned char row, unsigned char col, int maxVal, int delayVal)
{

  oled->SendStr(row,col,&_fBw24,zero);
  for (int i = 0 ; i <= maxVal; i++)
  {
    if ((i % 10) == 0 && i > 0)
    {
      tmpString2[0] = '0' + (i/10) ;
      oled->SendStr(row,col,&_fBw24,tmpString2);

    }
    
    tmpString2[0] = '0' + (i%10) ;
    tmpString[1] = '0' + i;

    oled->SendStr(row,col+3,&_fBw24,tmpString2);
    
    if (delayVal >0)
      delay(delayVal);
  }
}


void RunDemo(OLED* oled)
{
  oled->SetDisplayOff();

  //oled->drawBitmap((unsigned char*)buffer);
  
  //delay(2000);
  

  oled->ClearDisplay();
  delay(50);

  //oled->DeactivateScrolling();
  
  //oled->drawBitmap((unsigned char*)buffer);
  
  //delay(2000);
  
  oled->SetDisplayOn();

  //====================SHOW FONTS ARRAY[1-4]=======================//
  oled->SendStr(1,3,&_fSys8,fill_string1);
  oled->SendStr(2,3,&_fSys8,fill_string2);
  oled->SendStr(3,0,&_fSys8,fill_string3);
  oled->SendStr(4,3,&_fSys8,fill_string4);
  delay(3000);



  oled->ClearDisplay();

  //----------------------------------------
  //  Master Volume

  //  draw text above counter
  oled->SendStr(1,0,&_fSys8,fill_string1);
  oled->SendStr(2,0,&_fSys8,fill_string4);

  //  draw counter
  drawCounter(oled, 4, 0, 0, 0);

  //----------------------------------------
  //  Effect Volume
  
  //  draw text above counter
  oled->SendStr(1,10,&_fSys8,fill_string5);
  oled->SendStr(2,10,&_fSys8,fill_string4);

  //  draw counter
  drawCounter(oled, 4, 10, 0, 0);
  
  delay(2000);
  oled->SetDisplayOff();
  delay(2000);
  oled->SetDisplayOn();
  delay(2000);
  
  //-- Make them count...
  //  draw counter
  drawCounter(oled, 4, 0, 99, 0);
  drawCounter(oled, 4, 10, 99, 0);

  delay(2000);


  //  draw counter
//  drawCounter(oled, 4, 10, 0, 0);
//  drawCounter(oled, 4, 0, 99, 250);
//  drawCounter(oled, 4, 10, 99, 250);


/*  
  //----------------------------------------
  //  Draw bitmaps
  drawBitmap(logo);
  delay(2000);

  drawBitmap(HelloWorld);
  delay(2000);
*/

  //----------------------------------------
  //  Invert the display
  oled->DisplayInvert();
  delay(2000);  

  oled->DisplayNormal();
  delay(2000);  

  //while(1)
  //{
    //sendcommand(0xa6);  Set Normal Display
//    oled->SendCommand(0x29);  //Vertical and Horizontal Scroll Setup
//    oled->SendCommand(0x00);  //dummy byte
//    oled->SendCommand(0x00);  //define page0 as startpage address
//    oled->SendCommand(0x00);  //set time interval between each scroll ste as 6 frames
//    oled->SendCommand(0x07);  //define page7 as endpage address
//    oled->SendCommand(0x01);  //set vertical scrolling offset as 1 row
//    oled->SendCommand(0x2f);  //active scrolling
//    delay(10000);
//    
//    oled->DeactivateScrolling();
//    
//    delay(2000);

  //};


}


void AttnSetup() {
  Wire.beginTransmission(attResetAddr);
  Wire.write(0);
  Wire.write(0xFF);
  Wire.endTransmission();
  delay(relayLatchTime); 

  Wire.beginTransmission(attResetAddr+1);
  Wire.write(0);
  Wire.write(0xFF);
  Wire.endTransmission();
  delay(relayLatchTime); 

  Wire.beginTransmission(attResetAddr);
  Wire.write(0);
  Wire.write(0x00);
  Wire.endTransmission();
  delay(relayLatchTime); 
  
  Wire.beginTransmission(attResetAddr+1);
  Wire.write(0);
  Wire.write(0x00);
  Wire.endTransmission();
  delay(relayLatchTime); 
}

void SetVolume(int newVol, byte addrOffset)
{
  int sendVal;
  
  //  now set
  sendVal = (byte)newVol ;
  Wire.begin();
  Wire.beginTransmission(attSetAddr+addrOffset);
  Wire.write(0);
  Wire.write(sendVal);
  Wire.endTransmission();
  
  delay(relayLatchTime) ;

  Wire.begin();
  Wire.beginTransmission(attSetAddr+addrOffset);
  Wire.write(0);
  Wire.write(0x00);
  Wire.endTransmission();

  delay(relayLatchTime);


  // now reset
  sendVal = 0xFF ^ (byte)newVol;
  
  Wire.beginTransmission(attResetAddr+addrOffset);
  Wire.write(0);
  Wire.write(sendVal);
  Wire.endTransmission();
  
  delay(relayLatchTime);
  
  Wire.beginTransmission(attResetAddr+addrOffset);
  Wire.write(0);
  Wire.write(0x00);
  Wire.endTransmission();
  
  delay(relayLatchTime);

}

void drawSmCounter(OLED* oled, int row, int col, int val)
{
  if (val <= 9) {
    tttString[0] = '0';
    tttString[1] = (char)val+'0';
  }
  else
  {
    tttString[0] = '1';
    tttString[1] = (char)val-10+'0';
  }
  oled->SendStr(row,col,&_fSys8,tttString);
}

void SetVolume(unsigned int v)
{
  unsigned char bb;
  bool bSet;
  String outStr;

  //v = 128-v;
  
  bb = 0x01;
  outStr = "Volume: " + String(v);
  oledI2C.SendStr(0,0,&_fSys8,outStr);

  
  for (int i = 8 ; i > 0; --i) {
    bSet = ((bb & v) != 0);

    //drawSmCounter(&oledI2C, 0, 0, i);
    if (bSet) {
      tttString[0]='T';
    }
    else {
      tttString[0]='F';
    }
    
    tttString[1]=' ';
    
    //  Print the current index and the T/F
    oledI2C.SendStr(8-i, 12, &_fSys8, String(8-i));
    oledI2C.SendStr(8-i, 13, &_fSys8, tttString);

    dattnSPI.SetRelay(9-i, bSet);
    bb = bb << 1;
    //delay(1000);
    
  }
}

